{"version":3,"sources":["skylark-storages-diskfs.js"],"names":["define","skylark","diskfs","attach","types","downlad","data","name","window","navigator","msSaveBlob","isString","dataURItoBlob","a","document","createElement","Blob","URL","createObjectURL","href","setAttribute","dispatchEvent","CustomEvent","Deferred","read","readFile","file","params","d","reader","FileReader","onload","evt","resolve","target","result","onerror","e","code","error","alert","asArrayBuffer","readAsArrayBuffer","asDataUrl","readAsDataURL","asText","readAsText","promise","readImage","fileObj","img","Image","reject","then","dataUrl","src","catch","fileInput","maxFileSize","select","directory","multiple","fileSelected","picked","input","selectFiles","pickedFiles","i","length","size","splice","type","style","position","left","top","opacity","body","appendChild","onchange","entries","webkitEntries","webentry","all","files","Array","prototype","slice","call","value","webkitdirectory","click","arrays","concat","one","entry","path","onError","isFile","relativePath","isDirectory","dirReader","createReader","readEntries","map","apply","arguments","main"],"mappings":"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","file":"../skylark-storages-diskfs.js","sourcesContent":["define('skylark-storages-diskfs/diskfs',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n    function dataURLtoBlob(dataurl) {\r\n        var arr = dataurl.split(','),\r\n            mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]),\r\n            n = bstr.length,\r\n            u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], { type: mime });\r\n    }\r\n\r\n\r\n    var diskfs = function() {\r\n        return diskfs;\r\n    };\r\n\r\n    return skylark.attach(\"storages.diskfs\", diskfs);\r\n});\ndefine('skylark-storages-diskfs/download',[\r\n    \"skylark-langx/types\",\r\n    \"./diskfs\"\r\n],function(types,diskfs){\r\n\r\n    function downloadFile(data, name) {\r\n        if (window.navigator.msSaveBlob) {\r\n            if (types.isString(data)) {\r\n                data = dataURItoBlob(data);\r\n            }\r\n            window.navigator.msSaveBlob(data, name);\r\n        } else {\r\n            var a = document.createElement('a');\r\n            if (data instanceof Blob) {\r\n                data = URL.createObjectURL(data);\r\n            }\r\n            a.href = data;\r\n            a.setAttribute('download', name || 'noname');\r\n            a.dispatchEvent(new CustomEvent('click'));\r\n        }\r\n    }\r\n\r\n    return diskfs.downlad = downloadFile;\r\n\r\n});\r\n\ndefine('skylark-storages-diskfs/read',[\r\n    \"skylark-langx-async/Deferred\",\r\n    \"./diskfs\"\r\n],function(Deferred, diskfs){\r\n\r\n    function readFile(file, params) {\r\n        params = params || {};\r\n        var d = new Deferred,\r\n            reader = new FileReader();\r\n\r\n        reader.onload = function(evt) {\r\n            d.resolve(evt.target.result);\r\n        };\r\n        reader.onerror = function(e) {\r\n            var code = e.target.error.code;\r\n            if (code === 2) {\r\n                alert('please don\\'t open this page using protocol fill:///');\r\n            } else {\r\n                alert('error code: ' + code);\r\n            }\r\n        };\r\n\r\n        if (params.asArrayBuffer) {\r\n            reader.readAsArrayBuffer(file);\r\n        } else if (params.asDataUrl) {\r\n            reader.readAsDataURL(file);\r\n        } else if (params.asText) {\r\n            reader.readAsText(file);\r\n        } else {\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        return d.promise;\r\n    }\r\n\r\n    return diskfs.read = diskfs.readFile = readFile;\r\n    \r\n});\r\n\ndefine('skylark-storages-diskfs/readImage',[\r\n    \"skylark-langx/Deferred\",\r\n    \"./diskfs\",\r\n    \"./read\"\r\n],function(Deferred, diskfs,read){\r\n\r\n\tfunction readImage(fileObj) {\r\n        var d = new Deferred,\r\n\t    \timg = new Image();\r\n\r\n\t    img.onload = function() {\r\n\t      d.resolve(img);\r\n\t    };\r\n\t    img.onerror = function(e) {\r\n\t      d.reject(e);\r\n\t    };\r\n\r\n\t    read(fileObj,{\r\n\t    \tasDataUrl : true\r\n\t    }).then(function(dataUrl){\r\n\t        img.src = dataUrl;\r\n\t    }).catch(function(e){\r\n\t    \td.reject(e);\r\n\t    });\r\n\r\n\t    return d.promise;\r\n\t}\r\n\r\n\treturn diskfs.readImage = readImage;\r\n\r\n});\ndefine('skylark-storages-diskfs/select',[\r\n    \"./diskfs\"\r\n],function(diskfs){\r\n    var fileInput,\r\n        fileInputForm,\r\n        fileSelected,\r\n        maxFileSize = 1 / 0;\r\n\r\n    function select(params) {\r\n        params = params || {};\r\n        var directory = params.directory || false,\r\n            multiple = params.multiple || false,\r\n            fileSelected = params.picked;\r\n        if (!fileInput) {\r\n            var input = fileInput = document.createElement(\"input\");\r\n\r\n            function selectFiles(pickedFiles) {\r\n                for (var i = pickedFiles.length; i--;) {\r\n                    if (pickedFiles[i].size > maxFileSize) {\r\n                        pickedFiles.splice(i, 1);\r\n                    }\r\n                }\r\n                fileSelected(pickedFiles);\r\n            }\r\n\r\n            input.type = \"file\";\r\n            input.style.position = \"fixed\";\r\n            input.style.left = 0;\r\n            input.style.top = 0;\r\n            input.style.opacity = .001;\r\n            document.body.appendChild(input);\r\n\r\n            input.onchange = function(e) {\r\n                var entries = e.target.webkitEntries || e.target.entries;\r\n\r\n                if (entries && entries.length) {\r\n                    webentry.all(entries).then(function(files) {\r\n                        selectFiles(files);\r\n                    });\r\n                } else {\r\n                    selectFiles(Array.prototype.slice.call(e.target.files));\r\n                }\r\n                // reset to \"\", so selecting the same file next time still trigger the change handler\r\n                input.value = \"\";\r\n            };\r\n        }\r\n        fileInput.multiple = multiple;\r\n        fileInput.webkitdirectory = directory;\r\n        fileInput.click();\r\n    }\r\n\r\n    return diskfs.select = select;\r\n});\r\n\r\n\n define('skylark-storages-diskfs/webentry',[\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Deferred\",\r\n    \"./diskfs\"\r\n],function(arrays,Deferred, diskfs){\r\n    var concat = Array.prototype.concat;\r\n    var webentry = (function() {\r\n        function one(entry, path) {\r\n            var d = new Deferred(),\r\n                onError = function(e) {\r\n                    d.reject(e);\r\n                };\r\n\r\n            path = path || '';\r\n            if (entry.isFile) {\r\n                entry.file(function(file) {\r\n                    file.relativePath = path;\r\n                    d.resolve(file);\r\n                }, onError);\r\n            } else if (entry.isDirectory) {\r\n                var dirReader = entry.createReader();\r\n                dirReader.readEntries(function(entries) {\r\n                    all(\r\n                        entries,\r\n                        path + entry.name + '/'\r\n                    ).then(function(files) {\r\n                        d.resolve(files);\r\n                    }).catch(onError);\r\n                }, onError);\r\n            } else {\r\n                // Return an empy list for file system items\r\n                // other than files or directories:\r\n                d.resolve([]);\r\n            }\r\n            return d.promise;\r\n        }\r\n\r\n        function all(entries, path) {\r\n            return Deferred.all(\r\n                arrays.map(entries, function(entry) {\r\n                    return one(entry, path);\r\n                })\r\n            ).then(function() {\r\n                return concat.apply([], arguments);\r\n            });\r\n        }\r\n\r\n        return {\r\n            one: one,\r\n            all: all\r\n        };\r\n    })();\r\n\r\n    return diskfs.webentry = webentry;\r\n});\ndefine('skylark-storages-diskfs/main',[\r\n\t\"./diskfs\",\r\n\t\"./download\",\r\n\t\"./read\",\r\n\t\"./readImage\",\r\n\t\"./select\",\r\n\t\"./webentry\"\r\n],function(diskfs){\r\n\treturn diskfs;\r\n});\ndefine('skylark-storages-diskfs', ['skylark-storages-diskfs/main'], function (main) { return main; });\n\n"]}