{"version":3,"sources":["webentry.js"],"names":["define","arrays","Deferred","diskfs","concat","Array","prototype","one","entry","path","onError","e","d","reject","isFile","file","relativePath","resolve","isDirectory","createReader","readEntries","entries","all","name","then","files","catch","promise","map","apply","arguments","webentry"],"mappings":";;;;;;;AAACA,OAAO,CACJ,uBACA,+BACA,YACF,SAASC,EAAOC,EAAUC,GACxB,IAAIC,EAASC,MAAMC,UAAUF,OAEzB,SAASG,EAAIC,EAAOC,GAEF,SAAVC,EAAmBC,GACfC,EAAEC,OAAOF,CAAC,CACd,CAHJ,IAAIC,EAAI,IAAIV,EA0BZ,OArBAO,EAAOA,GAAQ,GACXD,EAAMM,OACNN,EAAMO,KAAK,SAASA,GAChBA,EAAKC,aAAeP,EACpBG,EAAEK,QAAQF,CAAI,CAClB,EAAGL,CAAO,EACHF,EAAMU,YACGV,EAAMW,aAAa,EACzBC,YAAY,SAASC,GAC3BC,EACID,EACAZ,EAAOD,EAAMe,KAAO,GACxB,EAAEC,KAAK,SAASC,GACZb,EAAEK,QAAQQ,CAAK,CACnB,CAAC,EAAEC,MAAMhB,CAAO,CACpB,EAAGA,CAAO,EAIVE,EAAEK,QAAQ,EAAE,EAETL,EAAEe,OACb,CAEA,SAASL,EAAID,EAASZ,GAClB,OAAOP,EAASoB,IACZrB,EAAO2B,IAAIP,EAAS,SAASb,GACzB,OAAOD,EAAIC,EAAOC,CAAI,CAC1B,CAAC,CACL,EAAEe,KAAK,WACH,OAAOpB,EAAOyB,MAAM,GAAIC,SAAS,CACrC,CAAC,CACL,CAQJ,OAAO3B,EAAO4B,SANH,CACHxB,IAAKA,EACLe,IAAKA,CACT,CAIR,CAAC","file":"../webentry.js","sourcesContent":[" define([\r\n    \"skylark-langx-arrays\",\r\n    \"skylark-langx-async/deferred\",\r\n    \"./diskfs\"\r\n],function(arrays,Deferred, diskfs){\r\n    var concat = Array.prototype.concat;\r\n    var webentry = (function() {\r\n        function one(entry, path) {\r\n            var d = new Deferred(),\r\n                onError = function(e) {\r\n                    d.reject(e);\r\n                };\r\n\r\n            path = path || '';\r\n            if (entry.isFile) {\r\n                entry.file(function(file) {\r\n                    file.relativePath = path;\r\n                    d.resolve(file);\r\n                }, onError);\r\n            } else if (entry.isDirectory) {\r\n                var dirReader = entry.createReader();\r\n                dirReader.readEntries(function(entries) {\r\n                    all(\r\n                        entries,\r\n                        path + entry.name + '/'\r\n                    ).then(function(files) {\r\n                        d.resolve(files);\r\n                    }).catch(onError);\r\n                }, onError);\r\n            } else {\r\n                // Return an empy list for file system items\r\n                // other than files or directories:\r\n                d.resolve([]);\r\n            }\r\n            return d.promise;\r\n        }\r\n\r\n        function all(entries, path) {\r\n            return Deferred.all(\r\n                arrays.map(entries, function(entry) {\r\n                    return one(entry, path);\r\n                })\r\n            ).then(function() {\r\n                return concat.apply([], arguments);\r\n            });\r\n        }\r\n\r\n        return {\r\n            one: one,\r\n            all: all\r\n        };\r\n    })();\r\n\r\n    return diskfs.webentry = webentry;\r\n});"]}